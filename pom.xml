<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cn.laifuzhi</groupId>
    <artifactId>RocketHttp</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <!-- maven插件使用的官方配置项 start -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <!-- maven插件使用的官方配置项 end -->

        <!-- 自定义配置项 start -->
        <classesShadedDir>${project.build.directory}/classes-shaded</classesShadedDir>
        <classesShadedNativeDir>${classesShadedDir}/META-INF/native</classesShadedNativeDir>
        <shadingPrefix>rockethttp_shade</shadingPrefix>
        <jarName>${project.build.finalName}.${project.packaging}</jarName>
        <!-- 自定义配置项 end -->

        <!-- 全部使用当前最新稳定版第三方依赖jar start -->
        <netty.version>4.1.56.Final</netty.version>
        <commons-pool.version>2.9.0</commons-pool.version>
        <lombok.version>1.18.16</lombok.version>
        <!-- logback中自带的slf4j就是1.7.25，本工程也使用这个版本，避免依赖冲突 -->
        <slf4j.version>1.7.25</slf4j.version>
        <logback.version>1.2.3</logback.version>
        <junit.version>4.13.1</junit.version>
        <!-- 第三方依赖jar end -->

        <!-- 全部使用当前最新稳定版maven插件 start -->
        <os-maven-plugin.version>1.6.2</os-maven-plugin.version>
        <maven-clean-plugin.version>3.1.0</maven-clean-plugin.version>
        <maven-resources-plugin.version>3.2.0</maven-resources-plugin.version>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <maven-surefire-plugin.version>3.0.0-M5</maven-surefire-plugin.version>
        <maven-jar-plugin.version>3.2.0</maven-jar-plugin.version>
        <maven-source-plugin.version>3.2.1</maven-source-plugin.version>
        <maven-shade-plugin.version>3.2.4</maven-shade-plugin.version>
        <maven-antrun-plugin.version>3.0.0</maven-antrun-plugin.version>
        <maven-install-plugin.version>3.0.0-M1</maven-install-plugin.version>
        <maven-deploy-plugin.version>3.0.0-M1</maven-deploy-plugin.version>
        <!-- maven插件 end -->
    </properties>

    <dependencies>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
            <version>${netty.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
            <version>${commons-pool.version}</version>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- 仅提供slf4j，具体的日志实现类由使用方自己决定 -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <!-- maven3中推荐指定插件版本否则有warn警告，否则会用超级pom中指定的版本或者当前最新release版，maven后续版本的super pom中可能不指定版本-->
    <!-- 所以本工程将所有使用到的maven插件全部指定了版本-->
    <!-- 全部使用当前最新稳定版maven插件 -->
    <build>
<!-- ${os.detected.classifier} -->
<!--        <extensions>-->
<!--            <extension>-->
<!--                <groupId>kr.motd.maven</groupId>-->
<!--                <artifactId>os-maven-plugin</artifactId>-->
<!--                <version>${os-maven-plugin.version}</version>-->
<!--            </extension>-->
<!--        </extensions>-->
        <plugins>
            <!-- 按照maven执行顺序定义 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>${maven-clean-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
            </plugin>

            <!-- logback配置文件不参与打包 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven-jar-plugin.version}</version>
                <configuration>
                    <excludes>
                        <exclude>logback.xml</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <!--
                在package的时候就生成源码包，并且要在shade插件的配置前面，保证shade插件执行时，已经有生成了本工程的源码包
                否则shade生成的源码包只会包含被shade引进来的jar的源码，不会包含本工程的源码
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>${maven-source-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
                默认生成shade之后的dependency-reduced-pom.xml，使用方直接在pom里点进来看到的也是这个pom
                除非看META-INF或者源码才能看到原始pom
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven-shade-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <!--
                                artifactSet的依赖在dependency-reduced-pom.xml设置为provided，
                                主要是为了让使用方直接就能知道具体的依赖版本，不用看源码里的真正pom文件
                            -->
                            <keepDependenciesWithProvidedScope>true</keepDependenciesWithProvidedScope>
                            <!-- 生成shade之后的jar包的源码 -->
                            <createSourcesJar>true</createSourcesJar>
                            <!-- 如果不设置true，shade源码包里import的还是依赖jar的类 -->
                            <shadeSourcesContent>true</shadeSourcesContent>
                            <!-- 将netty和对象池这两个jar的代码拷贝到shade后的jar里 -->
                            <artifactSet>
                                <includes>
                                    <include>io.netty:netty-all</include>
                                    <include>org.apache.commons:commons-pool2</include>
                                </includes>
                            </artifactSet>
                            <!-- 将netty和对象池这两个jar的MANIFEST.MF排除掉，最后shade的jar里只有本工程的MANIFEST.MF -->
                            <filters>
                                <filter>
                                    <artifact>io.netty:netty-all</artifact>
                                    <excludes>
                                        <exclude>META-INF/MANIFEST.MF</exclude>
                                    </excludes>
                                </filter>
                                <filter>
                                    <artifact>org.apache.commons:commons-pool2</artifact>
                                    <excludes>
                                        <exclude>META-INF/MANIFEST.MF</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <!-- 将netty和对象池这两个拷贝到shade后的jar里的代码进行包名转换，避免类名冲突 -->
                            <relocations>
                                <relocation>
                                    <pattern>io.netty</pattern>
                                    <shadedPattern>${shadingPrefix}.io.netty</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>org.apache.commons.pool2</pattern>
                                    <shadedPattern>${shadingPrefix}.org.apache.commons.pool2</shadedPattern>
                                </relocation>
                            </relocations>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
                使用shade集成netty之后，如果要使用native能力，需要把本地库名字改成relocations中的规则一样
                所以本工程参考netty官方测试对shade之后的native支持测试使用的配置，这样使用方才能加载到本地库使用native能力
                https://github.com/netty/netty/blob/4.1/testsuite-shading/pom.xml
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>${maven-antrun-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <unzip dest="${classesShadedDir}">
                                    <fileset dir="${project.build.directory}">
                                        <include name="${jarName}"/>
                                    </fileset>
                                </unzip>
                                <move file="${classesShadedNativeDir}/libnetty_resolver_dns_native_macos_x86_64.jnilib"
                                      tofile="${classesShadedNativeDir}/lib${shadingPrefix}_netty_resolver_dns_native_macos_x86_64.jnilib"/>
                                <move file="${classesShadedNativeDir}/libnetty_transport_native_epoll_aarch_64.so"
                                      tofile="${classesShadedNativeDir}/lib${shadingPrefix}_netty_transport_native_epoll_aarch_64.so"/>
                                <move file="${classesShadedNativeDir}/libnetty_transport_native_epoll_x86_64.so"
                                      tofile="${classesShadedNativeDir}/lib${shadingPrefix}_netty_transport_native_epoll_x86_64.so"/>
                                <move file="${classesShadedNativeDir}/libnetty_transport_native_kqueue_x86_64.jnilib"
                                      tofile="${classesShadedNativeDir}/lib${shadingPrefix}_netty_transport_native_kqueue_x86_64.jnilib"/>
                                <jar destfile="${project.build.directory}/${jarName}" basedir="${classesShadedDir}"/>
                                <delete dir="${classesShadedDir}"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>${maven-install-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>${maven-deploy-plugin.version}</version>
            </plugin>
        </plugins>
    </build>
</project>
